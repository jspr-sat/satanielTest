{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Resource group to deploy solution resources"
            }
        },
        "workspaceName": {
            "defaultValue": "<Enter Log Analytics Workspace name>",
            "type": "string",
            "metadata": {
                "description": "Workspace name for Log Analytics where Sentinel is setup"
            }
        },
        "dataConnectorsKind": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "The kind of data connectors to enable"
            }
        },
        "ruleGuid": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "The unique guid for this scheduled alert rule"
            }
        },
        "enableFusionAlert": {
            "type": "bool",
            "defaultValue": false
        },
        "enableMicrosoftAlerts": {
            "type": "bool",
            "defaultValue": false
        },
        "enableMLAlerts": {
            "type": "bool",
            "defaultValue": false
        }
    },
    "functions": [],
    "variables": {
        "ascRuleId": "[concat('asc', uniqueString(parameters('ruleGuid')))]",
        "asc2RuleId": "[concat('asc2', uniqueString(parameters('ruleGuid')))]",
        "mcasRuleId": "[concat('mcas', uniqueString(parameters('ruleGuid')))]",
        "mcas2RuleId": "[concat('mcas2', uniqueString(parameters('ruleGuid')))]",
        "aatpRuleId": "[concat('aatp', uniqueString(parameters('ruleGuid')))]",
        "mdatpRuleId": "[concat('mdatp', uniqueString(parameters('ruleGuid')))]",
        "aadipRuleId": "[concat('aadip', uniqueString(parameters('ruleGuid')))]",
        "aadip2RuleId": "[concat('aadip2', uniqueString(parameters('ruleGuid')))]",
        "o365RuleId": "[concat('o365', uniqueString(parameters('ruleGuid')))]",
        "fusionRuleId": "[concat('fusion', uniqueString(parameters('ruleGuid')))]",
        "mlbaSshRuleId": "[concat('mlSsh',uniqueString(parameters('ruleGuid')))]",
        "mlbaRdpRuleId": "[concat('mlRdp',uniqueString(parameters('ruleGuid')))]"

    },
    "resources": [
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'AzureActiveDirectoryIP'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('aadipRuleId'))]",
            "apiVersion": "2020-01-01",
            "kind": "MicrosoftSecurityIncidentCreation",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "532c1811-79ee-4d9f-8d4d-6304c840daa1",
                "description": "Create incidents based on Azure Active Directory Identity Protection alerts",
                "displayName": "Create incidents based on all alerts generated in Azure Active Directory Identity Protection",
                "enabled": true,
                "productFilter": "Azure Active Directory Identity Protection"
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'AzureActiveDirectory'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "name": "[concat(parameters('workspaceName'),'/ADIPQuery')]",
            "apiVersion": "2020-08-01",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "category": "Hunting Queries",
                "description": "Hunt for Administrative Unit events in Azure AD audit logs (past 30 days). These events should be rare. Make sure they are legitimate.",
                "displayName": "Administrative Unit events in Azure AD audit logs",
                "query": "// Administrative Unit events in Azure AD audit logs [DCSecurityOperations].\nAuditLogs\n| where OperationName in ('Add administrative unit', 'Delete administrative unit', 'Update administrative unit')\n| project TimeGenerated, OperationName, InitiatedByUpn=InitiatedBy.user.userPrincipalName, InitiatedById=InitiatedBy.user.id, TargetResources\n| order by TimeGenerated desc\n",
                "requiredDataConnectors": [
                    {
                        "dataTypes": [
                            "AuditLogs"
                        ],
                        "connectorId": "AzureActiveDirectory"
                    }
                ],
                "tactics": [
                    "Privilege Escalation"
                ],
                "techniques": [
                    "T1548"
                ],
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "columnName": "InitiatedById",
                                "identifier": "AadUserId"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'AzureActiveDirectoryIP'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('aadip2RuleId'))]",
            "apiVersion": "2022-04-01-preview",
            "kind": "Scheduled",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "a3df4a32-4805-4c6d-8699-f3c888af2f67",
                "description": "The combination of an Unfamiliar sign-in properties alert and an Atypical travel alert about the same user within a +10m or -10m window is considered a high severity incident.",
                "displayName": "Correlate Unfamiliar sign-in properties & atypical travel alerts",
                "enabled": false,
                "productFilter": "Azure Active Directory Identity Protection",
                "query": "// We can use this configuration TimeDeltaInMinutes if you want to chnage the time window that we try to match the alerts\nlet TimeDeltaInMinutes = 10;\nlet Alert_UnfamiliarSignInProps = \nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where ProductName =~ \"Azure Active Directory Identity Protection\"\n| where AlertName =~ \"Unfamiliar sign-in properties\"\n| mv-expand Entity = todynamic(Entities)\n| where Entity.Type =~ \"account\"\n| extend AadTenantId = tostring(Entity.AadTenantId)\n| extend AadUserId = tostring(Entity.AadUserId)\n| join kind=inner (\nIdentityInfo\n| distinct AccountTenantId, AccountObjectId, AccountUPN, AccountDisplayName\n| extend UserName = AccountDisplayName\n| extend UserAccount = AccountUPN\n| where isnotempty(AccountDisplayName) and isnotempty(UserAccount)\n| project AccountTenantId, AccountObjectId, UserAccount, UserName\n)\non\n$left.AadTenantId == $right.AccountTenantId,\n$left.AadUserId == $right.AccountObjectId\n| extend CompromisedEntity = iff(CompromisedEntity == \"N/A\" or isempty(CompromisedEntity), UserAccount, CompromisedEntity)\n| extend Alert_UnfamiliarSignInProps_Time = TimeGenerated\n| extend Alert_UnfamiliarSignInProps_Name = AlertName\n| extend Alert_UnfamiliarSignInProps_Severity = AlertSeverity\n| project AadTenantId, AadUserId, AccountTenantId, AccountObjectId, Alert_UnfamiliarSignInProps_Name, Alert_UnfamiliarSignInProps_Severity, Alert_UnfamiliarSignInProps_Time, UserAccount, UserName\n;\nlet Alert_AtypicalTravels = \nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where ProductName =~ \"Azure Active Directory Identity Protection\"\n| where AlertName =~ \"Atypical travel\"\n| mv-expand Entity = todynamic(Entities)\n| where Entity.Type =~ \"account\"\n| extend AadTenantId = tostring(Entity.AadTenantId)\n| extend AadUserId = tostring(Entity.AadUserId)\n| join kind=inner (\nIdentityInfo\n| distinct AccountTenantId, AccountObjectId, AccountUPN, AccountDisplayName\n| extend UserName = AccountDisplayName\n| extend UserAccount = AccountUPN\n| where isnotempty(AccountDisplayName) and isnotempty(UserAccount)\n| project AccountTenantId, AccountObjectId, UserAccount, UserName\n)\non\n$left.AadTenantId == $right.AccountTenantId,\n$left.AadUserId == $right.AccountObjectId\n| extend CompromisedEntity = iff(CompromisedEntity == \"N/A\" or isempty(CompromisedEntity), UserAccount, CompromisedEntity)\n| extend Alert_AtypicalTravels_Time = TimeGenerated\n| extend Alert_AtypicalTravels_Name = AlertName\n| extend Alert_AtypicalTravels_Severity = AlertSeverity\n| extend ExtendedProperties_json= parse_json(ExtendedProperties)\n| extend CurrentLocation = tostring(ExtendedProperties_json.[\"Current Location\"])\n| extend PreviousLocation = tostring(ExtendedProperties_json.[\"Previous Location\"])\n| extend CurrentIPAddress = tostring(ExtendedProperties_json.[\"Current IP Address\"])\n| extend PreviousIPAddress = tostring(ExtendedProperties_json.[\"Previous IP Address\"])\n| project AadTenantId, AadUserId, AccountTenantId, AccountObjectId, Alert_AtypicalTravels_Name, Alert_AtypicalTravels_Severity, Alert_AtypicalTravels_Time, CurrentIPAddress, PreviousIPAddress, CurrentLocation, PreviousLocation, UserAccount, UserName, CompromisedEntity\n;\nAlert_UnfamiliarSignInProps\n| join kind=inner Alert_AtypicalTravels on UserAccount\n| where abs(datetime_diff('minute', Alert_UnfamiliarSignInProps_Time, Alert_AtypicalTravels_Time)) <= TimeDeltaInMinutes\n| extend TimeDelta = Alert_UnfamiliarSignInProps_Time - Alert_AtypicalTravels_Time\n| project UserAccount, Alert_UnfamiliarSignInProps_Name, Alert_UnfamiliarSignInProps_Severity, Alert_UnfamiliarSignInProps_Time, Alert_AtypicalTravels_Name, Alert_AtypicalTravels_Severity, Alert_AtypicalTravels_Time, TimeDelta, CurrentLocation, PreviousLocation, CurrentIPAddress, PreviousIPAddress, UserName\n| extend UserEmailName = split(UserAccount,'@')[0], UPNSuffix = split(UserAccount,'@')[1]\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                    {
                        "dataTypes": [
                            "SecurityAlert (IPC)"
                        ],
                        "connectorId": "AzureActiveDirectoryIdentityProtection"
                    },
                    {
                        "dataTypes": [
                            "IdentityInfo"
                        ],
                        "connectorId": "BehaviorAnalytics"
                    }
                ],
                "tactics": [
                    "InitialAccess"
                ],
                "techniques": [
                    "T1078"
                ],
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "columnName": "UPNSuffix",
                                "identifier": "UPNSuffix"
                            },
                            {
                                "columnName": "UserEmailName",
                                "identifier": "Name"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "columnName": "CurrentIPAddress",
                                "identifier": "Address"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "columnName": "PreviousIPAddress",
                                "identifier": "Address"
                            }
                        ]
                    }
                ],
                "customDetails": {
                    "CurrentIPAddress": "CurrentIPAddress",
                    "Alert1_Name": "Alert_UnfamiliarSignInProps_Name",
                    "Alert2_Name": "Alert_AtypicalTravels_Name",
                    "CurrentLocation": "CurrentLocation",
                    "Alert1_Severity": "Alert_UnfamiliarSignInProps_Severity",
                    "Alert2_Time": "Alert_AtypicalTravels_Time",
                    "Alert2_Severity": "Alert_AtypicalTravels_Severity",
                    "PreviousIPAddress": "PreviousIPAddress",
                    "Alert1_Time": "Alert_UnfamiliarSignInProps_Time",
                    "TimeDelta": "TimeDelta",
                    "PreviousLocation": "PreviousLocation"
                }
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'AzureSecurityCenter'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('ascRuleId'))]",
            "apiVersion": "2020-01-01",
            "kind": "MicrosoftSecurityIncidentCreation",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "90586451-7ba8-4c1e-9904-7d1b7c3cc4d6",
                "description": "Create incidents based on Azure Security Center alerts",
                "displayName": "Create incidents based on all alerts generated in Azure Security Center",
                "enabled": true,
                "productFilter": "Azure Security Center"
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'AzureSecurityCenter'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('asc2RuleId'))]",
            "apiVersion": "2022-04-01-preview",
            "kind": "Scheduled",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "011c84d8-85f0-4370-b864-24c13455aa94",
                "description": "The query identifies any efforts by an attacker to delete backup containers, while also searching for any security alerts that may be linked to the same activity, in order to uncover additional information about the attacker's actions.' \nThough such an activity could be legitimate as part of business operation, some ransomware actors may perform such operation to cause interruption to regular business services.",
                "displayName": "Detect CoreBackUp Deletion Activity from related Security Alerts",
                "enabled": false,
                "productFilter": "Azure Security Center",
                "query": "SecurityAlert\n| extend Extprop = parse_json(ExtendedProperties)\n| mv-expand todynamic(Entities)\n| extend HostName = iff(isnotempty(tostring(Extprop[\"Compromised Host\"])), tolower(tostring(Extprop[\"Compromised Host\"])), tolower(tostring(parse_json(Entities).HostName)))\n| where isnotempty(HostName)\n| mv-expand todynamic(split(HostName, ','))\n| extend DnsDomain = iff(isnotempty(tostring(Extprop[\"Machine Domain\"])), tostring(Extprop[\"Machine Domain\"]), tostring(parse_json(Entities).DnsDomain))\n| extend UserName = iff(isnotempty(tostring(Extprop[\"User Name\"])), tostring(Extprop[\"User Name\"]), iff(tostring(parse_json(Entities).Type) == 'account', tostring(parse_json(Entities).Name), ''))\n| extend NTDomain = iff(isnotempty(tostring(Extprop[\"User Domain\"])), tostring(Extprop[\"User Domain\"]), tostring(parse_json(Entities).NTDomain))\n| extend IpAddress = iff(tostring(parse_json(Entities).Type) == 'ip', tostring(parse_json(Entities).Address), tostring(parse_json(Extprop).[\"IpAddress\"]))\n| summarize timestamp = arg_max(TimeGenerated, *) by AlertName, tostring(HostName)\n| project timestamp, AlertName, UserName, NTDomain, tostring(HostName), DnsDomain, IpAddress\n| join kind=inner\n(\nCoreAzureBackup\n| where State =~ \"Deleted\"\n| where OperationName =~ \"BackupItem\"\n| extend data = split(BackupItemUniqueId, \";\")\n| extend AzureLocation = data[0], VaultId=data[1], HostName=tolower(tostring(data[2])), DrivesBackedUp=data[3]\n| project timestamp = TimeGenerated, AzureLocation, VaultId, HostName, DrivesBackedUp, State, BackupItemUniqueId, _ResourceId, OperationName, BackupItemFriendlyName\n)\non HostName\n| project timestamp, AlertName, HostName, DnsDomain, UserName, NTDomain, _ResourceId, IpAddress, VaultId, AzureLocation, DrivesBackedUp, State, BackupItemUniqueId, OperationName, BackupItemFriendlyName\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                    {
                        "dataTypes": [
                            "SecurityAlert"
                        ],
                        "connectorId": "AzureSecurityCenter"
                    }
                ],
                "tactics": [
                    "Impact"
                ],
                "techniques": [
                    "T1496"
                ],
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "Name",
                                "columnName": "UserName"
                            },
                            {
                                "identifier": "NTDomain",
                                "columnName": "NTDomain"
                            }
                        ]
                    },
                    {
                        "entityType": "AzureResource",
                        "fieldMappings": [
                            {
                                "identifier": "ResourceId",
                                "columnName": "_ResourceId"
                            }
                        ]
                    },
                    {
                        "entityType": "Host",
                        "fieldMappings": [
                            {
                                "identifier": "HostName",
                                "columnName": "HostName"
                            },
                            {
                                "identifier": "DnsDomain",
                                "columnName": "DnsDomain"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IpAddress"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'AzureAdvancedThreatProtection'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('aatpRuleId'))]",
            "apiVersion": "2020-01-01",
            "kind": "MicrosoftSecurityIncidentCreation",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "40ba9493-4183-4eee-974f-87fe39c8f267",
                "description": "Create incidents based on Azure Advanced Threat Protection alerts",
                "displayName": "Create incidents based on all alerts generated in Azure Advanced Threat Protection",
                "enabled": true,
                "productFilter": "Azure Advanced Threat Protection"
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'MicrosoftCloudAppSecurity'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('mcasRuleId'))]",
            "apiVersion": "2020-01-01",
            "kind": "MicrosoftSecurityIncidentCreation",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "b3cfc7c0-092c-481c-a55b-34a3979758cb",
                "description": "Create incidents based on Microsoft Cloud App Security alerts",
                "displayName": "Create incidents based on all alerts generated in Microsoft Cloud App Security",
                "enabled": true,
                "productFilter": "Microsoft Cloud App Security"
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'MicrosoftCloudAppSecurity'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('mcas2RuleId'))]",
            "apiVersion": "2022-04-01-preview",
            "kind": "Scheduled",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "b9e3b9f8-a406-4151-9891-e5ff1ddd8c1d",
                "description": "This query identifies the additional files uploaded by the same IP address which triggered a malware alert for malicious content upload on Azure Blob or File Storage Container.",
                "displayName": "Linked Malicious Storage Artifacts",
                "enabled": false,
                "productFilter": "Microsoft Cloud App Security",
                "query": "//Collect the alert events\nlet alertData = SecurityAlert\n| where DisplayName has \"Potential malware uploaded to\"\n| extend Entities = parse_json(Entities)\n| mv-expand Entities;\n//Parse the IP address data\nlet ipData = alertData\n| where Entities['Type'] =~ \"ip\"\n| extend AttackerIP = tostring(Entities['Address']), AttackerCountry = tostring(Entities['Location']['CountryName']);\n//Parse the file data\nlet FileData = alertData\n| where Entities['Type'] =~ \"file\"\n| extend MaliciousFileDirectory = tostring(Entities['Directory']), MaliciousFileName = tostring(Entities['Name']), MaliciousFileHashes = tostring(Entities['FileHashes']);\n//Combine the File and IP data together\nipData\n| join (FileData) on VendorOriginalId\n| summarize by TimeGenerated, AttackerIP, AttackerCountry, DisplayName, ResourceId, AlertType, MaliciousFileDirectory, MaliciousFileName, MaliciousFileHashes\n//Create a type column so we can track if it was a File storage or blobl storage upload\n| extend type = iff(DisplayName has \"file\", \"File\", \"Blob\")\n| join (\n  union\n  StorageFileLogs,\n  StorageBlobLogs\n  //File upload operations\n  | where OperationName =~ \"PutBlob\" or OperationName =~ \"PutRange\"\n  //Parse out the uploader IP\n  | extend ClientIP = tostring(split(CallerIpAddress, \":\", 0)[0])\n  //Extract the filename from the Uri\n  | extend FileName = extract(@\"\\/([\\w\\-. ]+)\\?\", 1, Uri)\n  //Base64 decode the MD5 filehash, we will encounter non-ascii hex so string operations don't work\n  //We can work around this by making it an array then converting it to hex from an int\n  | extend base64Char = base64_decode_toarray(ResponseMd5)\n  | mv-expand base64Char\n  | extend hexChar = tohex(toint(base64Char))\n  | extend hexChar = iff(strlen(hexChar) < 2, strcat(\"0\", hexChar), hexChar)\n  | extend SourceTable = iff(OperationName has \"range\", \"StorageFileLogs\", \"StorageBlobLogs\")\n  | summarize make_list(hexChar, 1000) by CorrelationId, ResponseMd5, FileName, AccountName, TimeGenerated, RequestBodySize, ClientIP, SourceTable\n  | extend Md5Hash = strcat_array(list_hexChar, \"\")\n  //Pack the file information the summarise into a ClientIP row\n  | extend p = pack(\"FileName\", FileName, \"FileSize\", RequestBodySize, \"Md5Hash\", Md5Hash, \"Time\", TimeGenerated, \"SourceTable\", SourceTable)\n  | summarize UploadedFileInfo=make_list(p, 10000), FilesUploaded=count() by ClientIP\n      | join kind=leftouter (\n        union\n        StorageFileLogs,\n        StorageBlobLogs\n        | where OperationName =~ \"DeleteFile\" or OperationName =~ \"DeleteBlob\"\n        | extend ClientIP = tostring(split(CallerIpAddress, \":\", 0)[0])\n        | extend FileName = extract(@\"\\/([\\w\\-. ]+)\\?\", 1, Uri)\n        | extend SourceTable = iff(OperationName has \"range\", \"StorageFileLogs\", \"StorageBlobLogs\")\n        | extend p = pack(\"FileName\", FileName, \"Time\", TimeGenerated, \"SourceTable\", SourceTable)\n        | summarize DeletedFileInfo=make_list(p, 10000), FilesDeleted=count() by ClientIP\n        ) on ClientIP\n  ) on $left.AttackerIP == $right.ClientIP\n| mvexpand UploadedFileInfo\n| extend LinkedMaliciousFileName = tostring(UploadedFileInfo.FileName)\n| extend LinkedMaliciousFileHash = tostring(UploadedFileInfo.Md5Hash)\n| extend HashAlgorithm = \"MD5\"\n| project AlertTimeGenerated = TimeGenerated, LinkedMaliciousFileName, LinkedMaliciousFileHash, HashAlgorithm, AlertType, AttackerIP, AttackerCountry, MaliciousFileDirectory, MaliciousFileName, FilesUploaded, UploadedFileInfo\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                    {
                        "connectorId": "MicrosoftCloudAppSecurity",
                        "dataTypes": [
                            "SecurityAlert"
                        ]
                    }
                ],
                "tactics": [
                    "CommandAndControl",
                    "Exfiltration"
                ],
                "techniques": [
                    "T1071",
                    "T1567"
                ],
                "entityMappings": [
                    {
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "AttackerIP"
                            }
                        ],
                        "entityType": "IP"
                    },
                    {
                        "fieldMappings": [
                            {
                                "identifier": "Algorithm",
                                "columnName": "HashAlgorithm"
                            },
                            {
                                "identifier": "Value",
                                "columnName": "LinkedMaliciousFileHash"
                            }
                        ],
                        "entityType": "FileHash"
                    }
                ]
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'Office365'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('o365RuleId'))]",
            "apiVersion": "2020-01-01",
            "kind": "MicrosoftSecurityIncidentCreation",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "ee1d718b-9ed9-4a71-90cd-a483a4f008df",
                "description": "Create incidents based on all alerts generated in Office 365 Advanced Threat Protection",
                "displayName": "Create incidents based on Office 365 Advanced Threat Protection alerts",
                "enabled": true,
                "productFilter": "Office 365 Advanced Threat Protection"
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'MicrosoftDefenderAdvancedThreatProtection'),parameters('enableMicrosoftAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('mdatpRuleId'))]",
            "apiVersion": "2020-01-01",
            "kind": "MicrosoftSecurityIncidentCreation",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "alertRuleTemplateName": "327cd4ed-ca42-454b-887c-54e1c91363c6",
                "description": "Create incidents based on Microsoft Defender Advanced Threat Protection alerts",
                "displayName": "Create incidents based on all alerts generated in Microsoft Defender Advanced Threat Protection",
                "enabled": true,
                "productFilter": "Microsoft Defender Advanced Threat Protection"
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'Syslog'),parameters('enableMLAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('mlbaSshRuleId'))]",
            "apiVersion": "2022-07-01-preview",
            "kind": "MLBehaviorAnalytics",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "enabled": true,
                "alertRuleTemplateName": "fa118b98-de46-4e94-87f9-8e6d5060b60b"
            }
        },
        {
            "condition": "[and(contains(parameters('dataConnectorsKind'), 'SecurityEvents'),parameters('enableMLAlerts'))]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('mlbaRdpRuleId'))]",
            "apiVersion": "2022-07-01-preview",
            "kind": "MLBehaviorAnalytics",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "enabled": true,
                "alertRuleTemplateName": "737a2ce1-70a3-4968-9e90-3e6aca836abf"
            }
        },
        {
            "condition": "[parameters('enableFusionAlert')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspaceName'),'/Microsoft.SecurityInsights/',variables('fusionRuleId'))]",
            "apiVersion": "2020-01-01",
            "kind": "Fusion",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "enabled": true,
                "alertRuleTemplateName": "f71aba3d-28fb-450b-b192-4e76a83015c8"
            }
        }
    ],
    "outputs": {
        "ruleId": {
            "type": "string",
            "value": "[parameters('ruleGUID')]"
        }
    }
}
